//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace WCFDatabaseWebService.ServiceReferenceStudent {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="student", Namespace="http://schemas.datacontract.org/2004/07/WCFDatabaseWebService.Web")]
    public partial class student : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string courseField;
        
        private System.Nullable<int> feesField;
        
        private int idField;
        
        private string nameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string course {
            get {
                return this.courseField;
            }
            set {
                if ((object.ReferenceEquals(this.courseField, value) != true)) {
                    this.courseField = value;
                    this.RaisePropertyChanged("course");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> fees {
            get {
                return this.feesField;
            }
            set {
                if ((this.feesField.Equals(value) != true)) {
                    this.feesField = value;
                    this.RaisePropertyChanged("fees");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceStudent.IStudentService")]
    public interface IStudentService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IStudentService/GetData", ReplyAction="http://tempuri.org/IStudentService/GetDataResponse")]
        System.IAsyncResult BeginGetData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<WCFDatabaseWebService.ServiceReferenceStudent.student> EndGetData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IStudentService/InsertData", ReplyAction="http://tempuri.org/IStudentService/InsertDataResponse")]
        System.IAsyncResult BeginInsertData(string name, string course, string fees, System.AsyncCallback callback, object asyncState);
        
        void EndInsertData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IStudentService/UpdateData", ReplyAction="http://tempuri.org/IStudentService/UpdateDataResponse")]
        System.IAsyncResult BeginUpdateData(string id, string name, string course, string fees, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IStudentService/DeleteData", ReplyAction="http://tempuri.org/IStudentService/DeleteDataResponse")]
        System.IAsyncResult BeginDeleteData(string id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStudentServiceChannel : WCFDatabaseWebService.ServiceReferenceStudent.IStudentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<WCFDatabaseWebService.ServiceReferenceStudent.student> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<WCFDatabaseWebService.ServiceReferenceStudent.student>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StudentServiceClient : System.ServiceModel.ClientBase<WCFDatabaseWebService.ServiceReferenceStudent.IStudentService>, WCFDatabaseWebService.ServiceReferenceStudent.IStudentService {
        
        private BeginOperationDelegate onBeginGetDataDelegate;
        
        private EndOperationDelegate onEndGetDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertDataDelegate;
        
        private EndOperationDelegate onEndInsertDataDelegate;
        
        private System.Threading.SendOrPostCallback onInsertDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDataDelegate;
        
        private EndOperationDelegate onEndUpdateDataDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDataDelegate;
        
        private EndOperationDelegate onEndDeleteDataDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public StudentServiceClient() {
        }
        
        public StudentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StudentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StudentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StudentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetDataCompletedEventArgs> GetDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WCFDatabaseWebService.ServiceReferenceStudent.IStudentService.BeginGetData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<WCFDatabaseWebService.ServiceReferenceStudent.student> WCFDatabaseWebService.ServiceReferenceStudent.IStudentService.EndGetData(System.IAsyncResult result) {
            return base.Channel.EndGetData(result);
        }
        
        private System.IAsyncResult OnBeginGetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WCFDatabaseWebService.ServiceReferenceStudent.IStudentService)(this)).BeginGetData(callback, asyncState);
        }
        
        private object[] OnEndGetData(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<WCFDatabaseWebService.ServiceReferenceStudent.student> retVal = ((WCFDatabaseWebService.ServiceReferenceStudent.IStudentService)(this)).EndGetData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataCompleted(object state) {
            if ((this.GetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataAsync() {
            this.GetDataAsync(null);
        }
        
        public void GetDataAsync(object userState) {
            if ((this.onBeginGetDataDelegate == null)) {
                this.onBeginGetDataDelegate = new BeginOperationDelegate(this.OnBeginGetData);
            }
            if ((this.onEndGetDataDelegate == null)) {
                this.onEndGetDataDelegate = new EndOperationDelegate(this.OnEndGetData);
            }
            if ((this.onGetDataCompletedDelegate == null)) {
                this.onGetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataDelegate, null, this.onEndGetDataDelegate, this.onGetDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WCFDatabaseWebService.ServiceReferenceStudent.IStudentService.BeginInsertData(string name, string course, string fees, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertData(name, course, fees, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void WCFDatabaseWebService.ServiceReferenceStudent.IStudentService.EndInsertData(System.IAsyncResult result) {
            base.Channel.EndInsertData(result);
        }
        
        private System.IAsyncResult OnBeginInsertData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            string course = ((string)(inValues[1]));
            string fees = ((string)(inValues[2]));
            return ((WCFDatabaseWebService.ServiceReferenceStudent.IStudentService)(this)).BeginInsertData(name, course, fees, callback, asyncState);
        }
        
        private object[] OnEndInsertData(System.IAsyncResult result) {
            ((WCFDatabaseWebService.ServiceReferenceStudent.IStudentService)(this)).EndInsertData(result);
            return null;
        }
        
        private void OnInsertDataCompleted(object state) {
            if ((this.InsertDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertDataAsync(string name, string course, string fees) {
            this.InsertDataAsync(name, course, fees, null);
        }
        
        public void InsertDataAsync(string name, string course, string fees, object userState) {
            if ((this.onBeginInsertDataDelegate == null)) {
                this.onBeginInsertDataDelegate = new BeginOperationDelegate(this.OnBeginInsertData);
            }
            if ((this.onEndInsertDataDelegate == null)) {
                this.onEndInsertDataDelegate = new EndOperationDelegate(this.OnEndInsertData);
            }
            if ((this.onInsertDataCompletedDelegate == null)) {
                this.onInsertDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertDataCompleted);
            }
            base.InvokeAsync(this.onBeginInsertDataDelegate, new object[] {
                        name,
                        course,
                        fees}, this.onEndInsertDataDelegate, this.onInsertDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WCFDatabaseWebService.ServiceReferenceStudent.IStudentService.BeginUpdateData(string id, string name, string course, string fees, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateData(id, name, course, fees, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void WCFDatabaseWebService.ServiceReferenceStudent.IStudentService.EndUpdateData(System.IAsyncResult result) {
            base.Channel.EndUpdateData(result);
        }
        
        private System.IAsyncResult OnBeginUpdateData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            string name = ((string)(inValues[1]));
            string course = ((string)(inValues[2]));
            string fees = ((string)(inValues[3]));
            return ((WCFDatabaseWebService.ServiceReferenceStudent.IStudentService)(this)).BeginUpdateData(id, name, course, fees, callback, asyncState);
        }
        
        private object[] OnEndUpdateData(System.IAsyncResult result) {
            ((WCFDatabaseWebService.ServiceReferenceStudent.IStudentService)(this)).EndUpdateData(result);
            return null;
        }
        
        private void OnUpdateDataCompleted(object state) {
            if ((this.UpdateDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateDataAsync(string id, string name, string course, string fees) {
            this.UpdateDataAsync(id, name, course, fees, null);
        }
        
        public void UpdateDataAsync(string id, string name, string course, string fees, object userState) {
            if ((this.onBeginUpdateDataDelegate == null)) {
                this.onBeginUpdateDataDelegate = new BeginOperationDelegate(this.OnBeginUpdateData);
            }
            if ((this.onEndUpdateDataDelegate == null)) {
                this.onEndUpdateDataDelegate = new EndOperationDelegate(this.OnEndUpdateData);
            }
            if ((this.onUpdateDataCompletedDelegate == null)) {
                this.onUpdateDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateDataCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDataDelegate, new object[] {
                        id,
                        name,
                        course,
                        fees}, this.onEndUpdateDataDelegate, this.onUpdateDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WCFDatabaseWebService.ServiceReferenceStudent.IStudentService.BeginDeleteData(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteData(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void WCFDatabaseWebService.ServiceReferenceStudent.IStudentService.EndDeleteData(System.IAsyncResult result) {
            base.Channel.EndDeleteData(result);
        }
        
        private System.IAsyncResult OnBeginDeleteData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return ((WCFDatabaseWebService.ServiceReferenceStudent.IStudentService)(this)).BeginDeleteData(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteData(System.IAsyncResult result) {
            ((WCFDatabaseWebService.ServiceReferenceStudent.IStudentService)(this)).EndDeleteData(result);
            return null;
        }
        
        private void OnDeleteDataCompleted(object state) {
            if ((this.DeleteDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteDataAsync(string id) {
            this.DeleteDataAsync(id, null);
        }
        
        public void DeleteDataAsync(string id, object userState) {
            if ((this.onBeginDeleteDataDelegate == null)) {
                this.onBeginDeleteDataDelegate = new BeginOperationDelegate(this.OnBeginDeleteData);
            }
            if ((this.onEndDeleteDataDelegate == null)) {
                this.onEndDeleteDataDelegate = new EndOperationDelegate(this.OnEndDeleteData);
            }
            if ((this.onDeleteDataCompletedDelegate == null)) {
                this.onDeleteDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteDataCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDataDelegate, new object[] {
                        id}, this.onEndDeleteDataDelegate, this.onDeleteDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WCFDatabaseWebService.ServiceReferenceStudent.IStudentService CreateChannel() {
            return new StudentServiceClientChannel(this);
        }
        
        private class StudentServiceClientChannel : ChannelBase<WCFDatabaseWebService.ServiceReferenceStudent.IStudentService>, WCFDatabaseWebService.ServiceReferenceStudent.IStudentService {
            
            public StudentServiceClientChannel(System.ServiceModel.ClientBase<WCFDatabaseWebService.ServiceReferenceStudent.IStudentService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<WCFDatabaseWebService.ServiceReferenceStudent.student> EndGetData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<WCFDatabaseWebService.ServiceReferenceStudent.student> _result = ((System.Collections.ObjectModel.ObservableCollection<WCFDatabaseWebService.ServiceReferenceStudent.student>)(base.EndInvoke("GetData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertData(string name, string course, string fees, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = name;
                _args[1] = course;
                _args[2] = fees;
                System.IAsyncResult _result = base.BeginInvoke("InsertData", _args, callback, asyncState);
                return _result;
            }
            
            public void EndInsertData(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("InsertData", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateData(string id, string name, string course, string fees, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = id;
                _args[1] = name;
                _args[2] = course;
                _args[3] = fees;
                System.IAsyncResult _result = base.BeginInvoke("UpdateData", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateData(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateData", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteData(string id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteData", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteData(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteData", _args, result);
            }
        }
    }
}
